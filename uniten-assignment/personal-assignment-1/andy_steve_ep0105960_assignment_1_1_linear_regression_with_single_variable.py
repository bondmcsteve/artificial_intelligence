# -*- coding: utf-8 -*-
"""Andy Steve - EP0105960 - Assignment 1-1: Linear Regression with single variable

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vlK2AV6ZXth33plK_LYlIpyxt1dT2URg

##Example code for linear regression

Import libraries used for plotting and calculating
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LinearRegression

"""Generate some random points that have some positive trend. Alternatively, you can also generate your own data points. """

rng = np.random.RandomState(1)
x = 10 * rng.rand(50)
y = 2 * x - 5 + rng.randn(50)
plt.scatter(x, y);

"""Prepare the linear regression model, and start training."""

# load a linear regression model
model = LinearRegression()

# train the model
model.fit(x[:, np.newaxis], y)
# model.fit(x, y)

# plot the linear regression line
xfit = np.linspace(0, 10, 1000)
yfit = model.predict(xfit[:, np.newaxis])

plt.scatter(x, y, marker='+')
plt.plot(xfit, yfit, color='red');

print("Model slope:    ", model.coef_[0])
print("Model intercept:", model.intercept_)

model.coef_

# test prediction of an unknown point
model.predict([[0.5]])

y = model.coef_[0] * 0.5 + model.intercept_
 y

"""##Assignment 1, Part 1: Linear Regression with a Single Variable
Using the Malaysian per capita income historical data, estimate the per capita income for 2022 and 2032
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression

"""Download the Malaysian income per capita historical data into the colab workspace."""

!wget https://raw.githubusercontent.com/mdzafri/uniten-ai/main/2022-1/MalaysianIncomeRM.csv

# read CSV file and store values into dataframe using pandas
df = pd.read_csv("MalaysianIncomeRM.csv") 
df.head(5)  # display only top 5 values
# df          # display all values

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
plt.xlabel('Year')
plt.ylabel('Malaysian Income per Capita')
plt.scatter(df.year, df.income, marker='+')

# load a linear regression model
model = LinearRegression()

# train the model
model.fit(df[['year']], df.income)

"""Your tasks:
1.  Display the linear regression line on the data scatter plot.
2.  Display the slope and intercept of the regression line.
3.  Predict the per capita income for the year 2022 and 2032.

Linear Line Regression
"""

# displaying Linear Regression line
xfit = np.linspace(1970, 2020, 924)
yfit = model.predict(xfit[:, np.newaxis])

plt.scatter(df.year, df.income, marker='+')
plt.plot(xfit, yfit, color='red');

"""Display slope and intercept values of the Linear Regression Model above"""

print("Model Slope    :", model.coef_[0])
print("Model Intercept:", model.intercept_)

"""Displaying array value of model.coef_"""

model.coef_

"""By using model.predict() function, we find the predicted income for year 2022"""

model.predict([[2022]])

"""For year 2032, we use similar snippet as above"""

model.predict([[2032]])

"""For proof, we can use linear equation to validate the package function for both 2022 and 2032 respectively"""

y_2022 = model.coef_[0] * 2022 + model.intercept_
y_2022

y_2032 = model.coef_[0] * 2032 + model.intercept_
y_2032